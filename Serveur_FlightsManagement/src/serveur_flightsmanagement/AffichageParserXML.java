/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package serveur_flightsmanagement;

import java.io.File;
import java.io.IOException;
import java.util.LinkedList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;
import org.w3c.dom.*;
import org.xml.sax.SAXException;

/**
 *
 * @author tibha
 */
public class AffichageParserXML extends javax.swing.JFrame {
public LinkedList list;
    /**
     * Creates new form AffichageParserXML
     */
    public AffichageParserXML() {
        initComponents();
        Document doc;
        DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();
        dbf.setValidating(true);
        dbf.setNamespaceAware(true);
        list= new LinkedList();
        try {
            DocumentBuilder db = dbf.newDocumentBuilder();
            doc = db.parse(new File("C:\\Users\\tibha\\Desktop\\Programmation Reseau et tech internet\\ReseauxVilvens\\Serveur_FlightsManagement\\src\\serveur_flightsmanagement\\vols_prevus_poubelle-air_000214.xml"));
            affichageDonnées (doc, 0);
        } catch (SAXException ex) {
            Logger.getLogger(AffichageParserXML.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(AffichageParserXML.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ParserConfigurationException ex) {
            Logger.getLogger(AffichageParserXML.class.getName()).log(Level.SEVERE, null, ex);
        }
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane1.setViewportView(jTextArea1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 1212, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 513, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(AffichageParserXML.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(AffichageParserXML.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(AffichageParserXML.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(AffichageParserXML.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new AffichageParserXML().setVisible(true);
            }
        });
    }
    
    public void affichageDonnées (Node noeud, int profondeur)
    {
        if (noeud == null) return; // arrêt de la descente récursive
        String nom = noeud.getNodeName();
        String valeur = noeud.getNodeValue();
        switch(nom){
            case("compagnie"):
                System.out.println("Compagnie: ");
                loadNode(noeud);
                //System.out.println("Nom : " + eElement.getElementsByTagName("nom").item(0).getTextContent());
                //System.out.println("Pays : " + eElement.getElementsByTagName("pays").item(0).getTextContent());
                break;
            case("createDestination"):
                System.out.println("createDestination");
                loadNode(noeud);
                break;
            case("createFlights"):
                System.out.println("createFlights");
                loadNode(noeud);
                break;
            case("listeVols"):
                
        }
        /*
        if (valeur != null) valeur = valeur.trim();
        // éliminations des textes vides
        if (noeud.getNodeType() == Node.TEXT_NODE && valeur.equals("") ) ;
        else System.out.println(nom + " : " + valeur + "   " + profondeur);

        */
        NodeList enfants = noeud.getChildNodes();
        for (int i=0; i<enfants.getLength(); i++)
        {
        // appel récursif pour chaque enfant
            affichageDonnées (enfants.item(i), profondeur+1);
        }
    }
    public void loadNode(Node noeud)
    {
        if (noeud == null) return;
        
        NamedNodeMap attrs = noeud.getAttributes(); 
        if(attrs != null)
            for(int i = 0 ; i<attrs.getLength() ; i++) {
              Attr attribute = (Attr)attrs.item(i);     
              System.out.println(attribute.getName()+" = "+attribute.getValue());
            }
        NodeList enfants = noeud.getChildNodes();
        for (int i=0; i<enfants.getLength(); i++)
        {
            if(enfants.item(i) != null)
            {
                if(!enfants.item(i).getNodeName().equalsIgnoreCase("#text"))
                    System.out.print(enfants.item(i).getNodeName() + " = ");
                NodeList tmp = enfants.item(i).getChildNodes();
                if(tmp.item(0) != null)
                    System.out.print(tmp.item(0).getNodeValue() + "\n");
                loadNode (enfants.item(i));
            }
        }

        
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea jTextArea1;
    // End of variables declaration//GEN-END:variables
}
